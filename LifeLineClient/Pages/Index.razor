@page "/"
@inject ILiffClient Liff
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text.Json.Serialization
@using LifeLineClient.Models

<h2>グループ一覧</h2>
<div class="card" style="width: 20rem;">

    @if (indexResults != null)
    {
        <ul class="list-group">
            @foreach (IndexResult indexResult in indexResults)
            {
                <li class="list-group-item">
                    <a href="details/@indexResult.group_Id">@indexResult.group_Name (@indexResult.group_Count)</a>
                </li>
            }

        </ul>
    }
    else
    {
        <p>読み込み中です。もしくは現在あなたが所属しているグループはございません。</p>
    }
</div>

@code{

    protected string AccessToken { get; set; }
    private List<IndexResult> indexResults;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!Liff.Initialized)
            {
                await Liff.Init(JSRuntime);
                if (!await Liff.IsLoggedIn())
                {
                    await Liff.Login();
                    return;
                }
                Liff.Initialized = true;
            }
            AccessToken = await Liff.GetAccessToken();

            //Azure APIへつなげる準備
            string url = $"https://lifelinebotapi.azurewebsites.net/api/GroupList/GetGroupList?accessToken={AccessToken}";
            var request = new HttpRequestMessage(HttpMethod.Get, url);
            request.Headers.Add("Access-Control-Allow-Origin", "*");
            //リクエスト投げる
            HttpResponseMessage response = await Http.SendAsync(request);
            //取得値の処理
            string resJson = await response.Content.ReadAsStringAsync();
            indexResults = JsonSerializer.Deserialize<List<IndexResult>>(resJson);
            //結果反映
            StateHasChanged();
        }
        catch (Exception e)
        {
            await JSRuntime.InvokeAsync<object>("alert", e.ToString());
        }
    }

}